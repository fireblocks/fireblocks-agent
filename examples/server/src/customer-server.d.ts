/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/messagesStatus": {
    /** Get updates on requested messages */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["MessagesStatusRequest"];
        };
      };
      responses: {
        /** @description Messages Status */
        200: {
          content: {
            "application/json": components["schemas"]["MessagesStatusResponse"];
          };
        };
      };
    };
  };
  "/messagesToSign": {
    /** Sign Messages */
    post: {
      /** @description Messages to sign */
      requestBody: {
        content: {
          "application/json": components["schemas"]["MessagesRequest"];
        };
      };
      responses: {
        /** @description Messages Status */
        200: {
          content: {
            "application/json": components["schemas"]["MessagesStatusResponse"];
          };
        };
        default: components["schemas"]["Error"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    MessagesStatusRequest: {
      msgIds: number[];
    };
    MessagesStatusResponse: {
      statuses: components["schemas"]["MessageStatus"][];
    };
    MessagesRequest: {
      messages: components["schemas"]["MessageEnvelope"][];
    };
    /** @description Contains the message and transportMetadata necessary for internal Fireblocks operations. */
    MessageEnvelope: {
      message: components["schemas"]["Message"];
      transportMetadata: components["schemas"]["TransportMetadata"];
    };
    /** @description Metadata necessary for internal Fireblocks operations. */
    TransportMetadata: {
      msgId: number;
      deviceId: string;
      internalMessageId: string;
      type: components["schemas"]["RequestType"];
    };
    Message: {
      payloadSignatureData: components["schemas"]["PayloadSignatureData"];
      /**
       * @description Stringified JSON that holds the message payload. Parsed object will be of type '#/components/schemas/MessagePayload'
       * @example { "type": "KEY_LINK_PROOF_OF_OWNERSHIP_REQUEST", "tenantId": "ea7d0d9a-6a10-4288-9b91-da8fb0b149f2" }
       */
      payload: string;
    };
    PayloadSignatureData: {
      /** @example 0x */
      signature: string;
      /** @example signing_service */
      service: string;
    };
    MessagePayload: {
      /**
       * Format: uuid
       * @description The identifier of customer's Fireblocks tenant/workspace
       * @example ea7d0d9a-6a10-4288-9b91-da8fb0b149f2
       */
      tenantId: string;
      type: components["schemas"]["RequestType"];
      algorithm: components["schemas"]["Algorithm"];
      /**
       * @description The identifier of the signing key on the customer's servers
       * @example 70721651-a7f3-42f6-a984-6e058269495f
       */
      signingDeviceKeyId: string;
      /**
       * Format: uuid
       * @description The identifier of the signing key on Fireblocks
       * @example 70721651-a7f3-42f6-a984-6e058269495f
       */
      keyId: string;
      /** @description An array including the messages to be signed */
      messagesToSign: components["schemas"]["MessageToSign"][];
      /**
       * Format: uuid
       * @description The unique request ID used exclusively for Proof of Ownership requests.
       * @example b015f35e-5d44-4d68-a0df-a1c625255abc
       */
      requestId?: string;
      /**
       * Format: uuid
       * @description The unique transaction ID used exclusively for transaction signing requests.
       * @example 8c2b2b3d-fb83-497e-8138-72446b9184b6
       */
      txId?: string;
      /** @example 1704122262 */
      timestamp?: number;
      /** @example 1.0.0 */
      version?: string;
      /** @description The metadata provides comprehensive information about the transaction, policy outcomes, and other pertinent details. */
      metadata?: Record<string, never>;
    };
    /** @description A message that needs to be signed by the customer's key. */
    MessageToSign: {
      /** @description The message to be signed. */
      message: string;
      /** @description The index of the message. */
      index: number;
    };
    MessageStatus: {
      type: components["schemas"]["ResponseType"];
      /**
       * @example SIGNED
       * @enum {string}
       */
      status: "PENDING_SIGN" | "SIGNED" | "FAILED";
      request: components["schemas"]["MessageEnvelope"];
      response: components["schemas"]["MessageResponse"];
    };
    MessageResponse: {
      signedMessages?: components["schemas"]["SignedMessage"][];
      /** @example Error signing the request. */
      errorMessage?: string;
    };
    SignedMessage: {
      message: string;
      index: number;
      /** @example 0x */
      signature: string;
    };
    /**
     * @description The type of the message.
     * @example KEY_LINK_PROOF_OF_OWNERSHIP_REQUEST
     * @enum {string}
     */
    RequestType: "EXTERNAL_KEY_PROOF_OF_OWNERSHIP_REQUEST" | "KEY_LINK_PROOF_OF_OWNERSHIP_REQUEST";
    /**
     * @description Indicates the type of message for which the status is provided.
     * @example KEY_LINK_PROOF_OF_OWNERSHIP_RESPONSE
     * @enum {string}
     */
    ResponseType: "EXTERNAL_KEY_PROOF_OF_OWNERSHIP_RESPONSE" | "KEY_LINK_PROOF_OF_OWNERSHIP_RESPONSE";
    /**
     * @description The cryptographic algorithm used for signing.
     * @example ECDSA_SECP256K1
     * @enum {string}
     */
    Algorithm: "ECDSA_SECP256K1" | "EDDSA_ED25519";
    Error: {
      message: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
